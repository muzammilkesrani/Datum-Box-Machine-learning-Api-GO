/*
 * datumboxmachinelearningapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 07/23/2016
 */
package metrics_pkg


import(
	"encoding/json"
	"datumboxmachinelearningapi_lib/models_pkg"
	"github.com/apimatic/unirest-go"
	"datumboxmachinelearningapi_lib"
	"datumboxmachinelearningapi_lib/apihelper_pkg"
)
/*
 * Client structure as interface implementation
 */
type METRICS_IMPL struct { }

/**
 * The Document Similarity function estimates the degree of similarity between two documents. It can be used to detect duplicate webpages or detect plagiarism.
 * @param    string        apiKey       parameter: Required
 * @param    string        original     parameter: Required
 * @param    string        copy         parameter: Required
 * @return	Returns the []*models_pkg.ObjectForDocument response from the API call
 */
func (me *METRICS_IMPL) CreateDocumentSimilarity (
            apiKey string,
            original string,
            copy string) ([]*models_pkg.ObjectForDocument, error) {
        //the base uri for api requests
    _queryBuilder := datumboxmachinelearningapi_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/1.0/DocumentSimilarity.json "

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
    }

    //form parameters
    parameters := map[string]interface{} {

        "api_key" : apiKey,
        "original" : original,
        "copy" : copy,

    }


    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, parameters)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
        err = apihelper_pkg.NewAPIError("HTTP Response Not OK" , _response.Code, _response.RawBody)
    }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal []*models_pkg.ObjectForDocument
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

